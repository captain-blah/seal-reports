<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><CurrentViewGUID>63dc764c-607a-411a-9cf6-f31b692e1b97</CurrentViewGUID><GUID>9aa8a4e5-c63d-47c1-ad40-decaf7d7980c</GUID><ViewGUID>63dc764c-607a-411a-9cf6-f31b692e1b97</ViewGUID><InputValues><ReportRestriction><GUID>d825934d-949c-4f3b-886a-0fd8306241de</GUID><Type>Text</Type><DisplayName>Folders to check</DisplayName><EnumGUID>482a21ca-667c-4a77-b498-53a45b9e4ec9</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>482a21ca-667c-4a77-b498-53a45b9e4ec9</EnumGUIDEL><Prompt>Prompt</Prompt><TypeRe>Text</TypeRe><ChangeOperator>false</ChangeOperator><EnumGUIDRE>482a21ca-667c-4a77-b498-53a45b9e4ec9</EnumGUIDRE></ReportRestriction><ReportRestriction><GUID>4236561b-7669-486f-91c9-be3551ff9123</GUID><Type>Text</Type><DisplayName>Check sub-folders</DisplayName><EnumGUID>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDEL><Prompt>PromptOneValue</Prompt><TypeRe>Text</TypeRe><ChangeOperator>false</ChangeOperator><EnumGUIDRE>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDRE><EnumValues><string>Yes</string></EnumValues></ReportRestriction><ReportRestriction><GUID>860d8a7e-8dbe-42d6-8493-90068227d087</GUID><Type>Text</Type><DisplayName>Execute all views</DisplayName><EnumGUID>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDEL><Prompt>PromptOneValue</Prompt><TypeRe>Text</TypeRe><ChangeOperator>false</ChangeOperator><EnumGUIDRE>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDRE><EnumValues><string>Yes</string></EnumValues></ReportRestriction><ReportRestriction><GUID>faa58cc7-1a6b-415f-9e0e-cd92b2077290</GUID><Type>Text</Type><DisplayName>Execute tasks</DisplayName><EnumGUID>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDEL><Prompt>PromptOneValue</Prompt><TypeRe>Text</TypeRe><ChangeOperator>false</ChangeOperator><EnumGUIDRE>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUIDRE><EnumValues><string>No</string></EnumValues></ReportRestriction><ReportRestriction><GUID>653ee6cd-7d85-44b9-8e88-96734a9abad7</GUID><Type>Numeric</Type><DisplayName>Execution timeout (seconds)</DisplayName><PivotPosition>Row</PivotPosition><TypeEd>Numeric</TypeEd><Prompt>PromptOneValue</Prompt><Required>true</Required><TypeRe>Numeric</TypeRe><ChangeOperator>false</ChangeOperator><Value1>120</Value1></ReportRestriction></InputValues><Sources><ReportSource><GUID>15cdf9c1-e880-40db-aba4-b55c0a8b4b06</GUID><Name>Reports</Name><Connections><MetaConnection><GUID>c6a5fd34-7111-477d-837b-33dfa677b8b2</GUID><Name>connection</Name><ConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</ConnectionString></MetaConnection></Connections><ConnectionGUID>c6a5fd34-7111-477d-837b-33dfa677b8b2</ConnectionGUID><IsNoSQL>true</IsNoSQL><MetaData><Tables><MetaTable><GUID>26ce0631-0225-452c-8ecd-dc1b0ec2129f</GUID><DefinitionScript>@using System.Data&#xD;
@{&#xD;
    MetaTable metaTable = Model;&#xD;
                ReportExecutionLog log = metaTable;&#xD;
&#xD;
    //Script executed to define the result table columns that will be loaded by the 'Load Script'&#xD;
    //Note that other assemblies can be used by saving the .dll in the Repository 'Assemblies' sub-folder...&#xD;
    DataTable table = new DataTable();&#xD;
    table.Columns.Add(new DataColumn("name", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("path", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("view", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("messages", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("has_error", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("errors", typeof(string)));&#xD;
    metaTable.NoSQLTable = table;&#xD;
    log.LogMessage("{0} column(s) defined", table.Columns.Count);&#xD;
}&#xD;
</DefinitionScript><LoadScript>@using System.Data&#xD;
@using System.IO&#xD;
@{&#xD;
    MetaTable metaTable = Model;&#xD;
    DataTable table = metaTable.NoSQLTable;&#xD;
    ReportExecutionLog log = metaTable;&#xD;
    ReportModel reportModel = metaTable.NoSQLModel;&#xD;
    Report report = (reportModel != null ? reportModel.Report : null);&#xD;
&#xD;
    if (report != null &amp;&amp; report.Tag != null) {&#xD;
        foreach (var item in ((List&lt;ReportExecution&gt;) report.Tag)) {&#xD;
            table.Rows.Add(&#xD;
                item.Report.DisplayNameEx, &#xD;
                item.Report.FilePath.Replace(report.Repository.ReportsFolder, ""), &#xD;
                ((ReportView)item.Tag).Name,&#xD;
                item.Report.ExecutionMessages,&#xD;
                item.Report.HasErrors ? "Yes" : "No",&#xD;
                (item.Report.ExecutionErrors + Helper.AddNotEmpty("\r\n",((ReportView)item.Tag).Error))&#xD;
                );&#xD;
        }&#xD;
    }&#xD;
    &#xD;
    if (report != null &amp;&amp; report.Tag2 != null) {&#xD;
        foreach (var item in ((Dictionary&lt;string,string&gt;) report.Tag2)) {&#xD;
            table.Rows.Add(&#xD;
                Path.GetFileName(item.Key), &#xD;
                item.Key.Replace(report.Repository.ReportsFolder, ""), &#xD;
                "",&#xD;
                "",&#xD;
                "Yes",&#xD;
                item.Value&#xD;
                );&#xD;
        }&#xD;
    }&#xD;
&#xD;
    log.LogMessage("{0} record(s) loaded", table.Rows.Count);&#xD;
}&#xD;
</LoadScript><Alias>SealMasterTable</Alias><DynamicColumns>true</DynamicColumns><Columns><MetaColumn><GUID>af19fac2-a2fb-4af6-b8ff-c7ec179af328</GUID><Name>name</Name><Type>Text</Type><Category>Master</Category><DisplayName>Name</DisplayName><DisplayOrder>1</DisplayOrder></MetaColumn><MetaColumn><GUID>e5c65f01-c554-4dba-b845-56c95b30c889</GUID><Name>path</Name><Type>Text</Type><Category>Master</Category><DisplayName>Path</DisplayName><DisplayOrder>2</DisplayOrder></MetaColumn><MetaColumn><GUID>d0a4e1e3-4bc8-4a9f-9eeb-9a5f2a870a74</GUID><Name>view</Name><Type>Text</Type><Category>Master</Category><DisplayName>View</DisplayName><DisplayOrder>3</DisplayOrder></MetaColumn><MetaColumn><GUID>84beb0c8-b118-47ea-9adc-4a55ec3e00de</GUID><Name>messages</Name><Type>Text</Type><Category>Master</Category><DisplayName>Messages</DisplayName><DisplayOrder>4</DisplayOrder></MetaColumn><MetaColumn><GUID>b1701622-aa3c-4879-9944-2d57a1f8cb4d</GUID><Name>has_error</Name><Type>Text</Type><Category>Master</Category><DisplayName>Has error</DisplayName><DisplayOrder>5</DisplayOrder><EnumGUID>53d43ae0-1513-4e46-b3b7-084f36f13833</EnumGUID></MetaColumn><MetaColumn><GUID>312aef12-f0e6-45fa-8207-fe9aae877309</GUID><Name>errors</Name><Type>Text</Type><Category>Master</Category><DisplayName>Errors</DisplayName><DisplayOrder>6</DisplayOrder></MetaColumn></Columns></MetaTable></Tables><Enums><MetaEnum><GUID>482a21ca-667c-4a77-b498-53a45b9e4ec9</GUID><Name>Folders</Name></MetaEnum><MetaEnum><GUID>53d43ae0-1513-4e46-b3b7-084f36f13833</GUID><Name>YesNo</Name><Values><MetaEV><Id>Yes</Id></MetaEV><MetaEV><Id>No</Id></MetaEV></Values></MetaEnum></Enums></MetaData></ReportSource></Sources><Models><ReportModel><GUID>f31eea7f-e982-44e1-8d12-0d304f372949</GUID><Name>Reports</Name><SourceGUID>15cdf9c1-e880-40db-aba4-b55c0a8b4b06</SourceGUID><Elements><ReportElement><GUID>b8114601-cf91-423f-a1e2-5000a3469cc4</GUID><Name>name</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>af19fac2-a2fb-4af6-b8ff-c7ec179af328</MetaColumnGUID></ReportElement><ReportElement><GUID>e102fcc2-d97f-4e6c-99e9-7d657a6a057f</GUID><Name>path</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>e5c65f01-c554-4dba-b845-56c95b30c889</MetaColumnGUID></ReportElement><ReportElement><GUID>55438767-02f7-4194-ac9d-ecc5930cf2c2</GUID><Name>view</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>d0a4e1e3-4bc8-4a9f-9eeb-9a5f2a870a74</MetaColumnGUID></ReportElement><ReportElement><GUID>862bf5bf-42d4-4eaf-a2df-e37437bd61e8</GUID><Name>has_error</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>b1701622-aa3c-4879-9944-2d57a1f8cb4d</MetaColumnGUID></ReportElement></Elements><Restriction>[c912aaf1-418f-45ca-bd37-5289721aa00d]</Restriction><Restrictions><ReportRestriction><GUID>c912aaf1-418f-45ca-bd37-5289721aa00d</GUID><Name>has_error</Name><DisplayName /><DisplayOrder>1</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>b1701622-aa3c-4879-9944-2d57a1f8cb4d</MetaColumnGUID><Prompt>Prompt</Prompt><ChangeOperator>false</ChangeOperator><DisplayOrderRE>1</DisplayOrderRE></ReportRestriction></Restrictions></ReportModel><ReportModel><GUID>ef7b732c-c9d7-4327-8f4c-b5a4ec8bc3de</GUID><Name>Messages</Name><SourceGUID>15cdf9c1-e880-40db-aba4-b55c0a8b4b06</SourceGUID><Elements><ReportElement><GUID>9998c98b-4419-4e62-bdb3-4891e890e910</GUID><Name>name</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>af19fac2-a2fb-4af6-b8ff-c7ec179af328</MetaColumnGUID></ReportElement><ReportElement><GUID>aa63ef2e-7c60-49f5-8c0a-b0443003d38b</GUID><Name>messages</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>84beb0c8-b118-47ea-9adc-4a55ec3e00de</MetaColumnGUID></ReportElement></Elements><Restriction>[966b0934-567c-4ce0-936b-0b760db8032f]&#xD;
AND [19f7471b-3ee7-4745-b712-b9f2c8f2e713]</Restriction><Restrictions><ReportRestriction><GUID>966b0934-567c-4ce0-936b-0b760db8032f</GUID><Name>has_error</Name><DisplayName /><DisplayOrder>1</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>b1701622-aa3c-4879-9944-2d57a1f8cb4d</MetaColumnGUID><Prompt>Prompt</Prompt><ChangeOperator>false</ChangeOperator><DisplayOrderRE>1</DisplayOrderRE></ReportRestriction><ReportRestriction><GUID>19f7471b-3ee7-4745-b712-b9f2c8f2e713</GUID><Name>messages</Name><DisplayName /><DisplayOrder>2</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>84beb0c8-b118-47ea-9adc-4a55ec3e00de</MetaColumnGUID><DisplayOrderRE>2</DisplayOrderRE><Operator>IsNotEmpty</Operator></ReportRestriction></Restrictions></ReportModel><ReportModel><GUID>72d5e006-f7f1-4a14-95da-c3cddcdc9ca6</GUID><Name>Errors</Name><SourceGUID>15cdf9c1-e880-40db-aba4-b55c0a8b4b06</SourceGUID><Elements><ReportElement><GUID>333cd96b-109e-45bf-9e50-3f4884b31c01</GUID><Name>path</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>e5c65f01-c554-4dba-b845-56c95b30c889</MetaColumnGUID></ReportElement><ReportElement><GUID>dc0275a0-40c6-4ec8-ac35-b43ccb579297</GUID><Name>name</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>af19fac2-a2fb-4af6-b8ff-c7ec179af328</MetaColumnGUID></ReportElement><ReportElement><GUID>3c431c43-5bb2-4d83-bce1-6ea3d1c49631</GUID><Name>errors</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>312aef12-f0e6-45fa-8207-fe9aae877309</MetaColumnGUID></ReportElement></Elements><Restriction>[5a27e3e3-26b0-40c1-9098-ffc59fe1d7d8]&#xD;
AND [3f5b1047-6130-4d34-84f9-248148fbb695]</Restriction><Restrictions><ReportRestriction><GUID>5a27e3e3-26b0-40c1-9098-ffc59fe1d7d8</GUID><Name>has_error</Name><DisplayName /><DisplayOrder>1</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>b1701622-aa3c-4879-9944-2d57a1f8cb4d</MetaColumnGUID><Prompt>Prompt</Prompt><ChangeOperator>false</ChangeOperator><DisplayOrderRE>1</DisplayOrderRE></ReportRestriction><ReportRestriction><GUID>3f5b1047-6130-4d34-84f9-248148fbb695</GUID><Name>errors</Name><DisplayName /><DisplayOrder>2</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>312aef12-f0e6-45fa-8207-fe9aae877309</MetaColumnGUID><DisplayOrderRE>2</DisplayOrderRE><Operator>IsNotEmpty</Operator></ReportRestriction></Restrictions></ReportModel></Models><Tasks><ReportTask><GUID>a3ff48d8-a5ce-4d27-b68f-c4edb362a15c</GUID><Name>Check Executions</Name><CancelReport>false</CancelReport><SourceGUID>15cdf9c1-e880-40db-aba4-b55c0a8b4b06</SourceGUID><Script>@using System.IO&#xD;
@using System.Text&#xD;
@using System.Threading&#xD;
@using System.Data&#xD;
&#xD;
@{&#xD;
    ReportTask task = Model;&#xD;
    Report rootReport = task.Report;&#xD;
    Repository repository = rootReport.Repository;&#xD;
    &#xD;
    //Stores all executions in the Tag&#xD;
    rootReport.Tag = new List&lt;ReportExecution&gt;();&#xD;
    rootReport.Tag2 = new Dictionary&lt;string,string&gt;();&#xD;
    try&#xD;
    {&#xD;
        //Init the NoSQL table&#xD;
        MetaTable metaTable = rootReport.Sources.First(i =&gt; i.Name=="Reports").MetaData.MasterTable;&#xD;
        metaTable.BuildNoSQLTable(false);&#xD;
        &#xD;
        bool checkPersonalFolders = false;&#xD;
        rootReport.LogMessage("Starting Check Report Executions\r\n");&#xD;
        var folders = rootReport.InputValues.FirstOrDefault(i =&gt; i.DisplayNameEl.StartsWith("Folders"));&#xD;
        if (folders.EnumValues.Count == 0) {&#xD;
            CheckExecutions(rootReport, repository.ReportsFolder);&#xD;
            checkPersonalFolders = true;&#xD;
        }&#xD;
        else {&#xD;
            foreach (var folder in folders.EnumValues.ToList()) {&#xD;
                if (folder.ToLower().StartsWith("personal folders")) {&#xD;
                    checkPersonalFolders = true;&#xD;
                }&#xD;
                else {&#xD;
                    CheckExecutions(rootReport, repository.ReportsFolder + folder);&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
        &#xD;
        if (checkPersonalFolders) {&#xD;
            rootReport.LogMessage("Checking personal folders\r\n");&#xD;
            CheckExecutions(rootReport, repository.PersonalFolder);&#xD;
        }&#xD;
    }&#xD;
    catch (Exception ex)&#xD;
    {&#xD;
       ((Dictionary&lt;string,string&gt;) rootReport.Tag2).Add("[UNEXPECTED ERROR RECEIVED]", ex.Message);&#xD;
        rootReport.LogMessage("\r\n[UNEXPECTED ERROR RECEIVED]\r\n{0}\r\n", ex.Message);&#xD;
    }&#xD;
    rootReport.LogMessage("Check Report Executions terminated\r\n");   &#xD;
}&#xD;
&#xD;
@functions {&#xD;
    void CheckExecutions(Report rootReport, string folder)&#xD;
    {&#xD;
        rootReport.LogMessage("Checking folder '{0}'", folder);&#xD;
        Repository repository = rootReport.Repository;&#xD;
        MetaTable metaTable = rootReport.Sources.First(i =&gt; i.Name=="Reports").MetaData.MasterTable;&#xD;
        DataTable table = metaTable.NoSQLTable;&#xD;
&#xD;
        var execAllViews = rootReport.InputValues.First(i =&gt; i.DisplayNameEl.StartsWith("Execute all views"));&#xD;
        var execTasks = rootReport.InputValues.First(i =&gt; i.DisplayNameEl.StartsWith("Execute tasks"));&#xD;
        var execTimeout = rootReport.InputValues.First(i =&gt; i.DisplayNameEl.StartsWith("Execution timeout"));&#xD;
&#xD;
        foreach (string reportPath in Directory.GetFiles(folder, "*." + Repository.SealReportFileExtension))&#xD;
        {&#xD;
            string scriptName = "";&#xD;
            try&#xD;
            {&#xD;
                if (rootReport.Cancel) return;&#xD;
                rootReport.LogMessage("Checking report '{0}'", reportPath);&#xD;
                Report report = Report.LoadFromFile(reportPath, repository);&#xD;
                if (string.IsNullOrEmpty(report.LoadErrors)) {&#xD;
                    //check script compilations&#xD;
                    scriptName = "Report Init Script";&#xD;
                    RazorHelper.Compile(RazorHelper.GetFullScript(report.InitScript, report), report.GetType(), Guid.NewGuid().ToString());&#xD;
                    scriptName = "Report Navigation Script";&#xD;
                    RazorHelper.Compile(RazorHelper.GetFullScript(report.NavigationScript, new NavigationLink() { Report=report }), typeof(NavigationLink), Guid.NewGuid().ToString());&#xD;
                    foreach (CommonScript script in report.CommonScripts) {&#xD;
                        scriptName = string.Format("Report Common Script '{0}'", script.Name);&#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(report.GetCommonScriptsHeader(script), script), script.GetType(), Guid.NewGuid().ToString());&#xD;
                    }&#xD;
                    foreach (ReportTask task in report.Tasks) {&#xD;
                        scriptName = string.Format("Report Task Script '{0}'", task.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(task.Script, task), task.GetType(), Guid.NewGuid().ToString());&#xD;
                    }&#xD;
                    foreach (ReportModel model in report.Models) {&#xD;
                        scriptName = string.Format("Report Model Pre Load Script '{0}'", model.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(model.PreLoadScript, model), model.GetType(), Guid.NewGuid().ToString());&#xD;
                        scriptName = string.Format("Report Model Load Script '{0}'", model.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(model.LoadScript, model), model.GetType(), Guid.NewGuid().ToString());&#xD;
                        scriptName = string.Format("Report Model Final Script '{0}'", model.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(model.FinalScript, model), model.GetType(), Guid.NewGuid().ToString());&#xD;
                        &#xD;
                        foreach (ReportElement element in model.Elements) {&#xD;
                            scriptName = string.Format("Report Model '{0}' Element Cell Script '{1}'", model.Name, element.Name);                    &#xD;
                            RazorHelper.Compile(RazorHelper.GetFullScript(element.CellScript, new ResultCell() { Element=element }), typeof(ResultCell), Guid.NewGuid().ToString());&#xD;
                            scriptName = string.Format("Report Model '{0}' Element Navigation Script '{1}'", model.Name, element.Name);                    &#xD;
                            RazorHelper.Compile(RazorHelper.GetFullScript(element.NavigationScript, new NavigationLink() { Report=report }), typeof(NavigationLink), Guid.NewGuid().ToString());&#xD;
                        }&#xD;
                    }&#xD;
                    &#xD;
                    foreach (ReportOutput output in report.Outputs) {&#xD;
                        scriptName = string.Format("Report Output '{0}' Pre Script '{0}'", output.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(output.PreScript, output), output.GetType(), Guid.NewGuid().ToString());&#xD;
                        scriptName = string.Format("Report Output '{0}' Post Script '{0}'", output.Name);                    &#xD;
                        RazorHelper.Compile(RazorHelper.GetFullScript(output.PostScript, output), output.GetType(), Guid.NewGuid().ToString());&#xD;
                    }&#xD;
                    &#xD;
                    report.CheckingExecution = true;&#xD;
                    &#xD;
                    //Disable task&#xD;
                    if (execTasks.FirstStringValue == "No") {&#xD;
                        foreach (ReportTask task in report.Tasks) task.Enabled = false;&#xD;
                    }&#xD;
&#xD;
                    foreach (ReportView view in report.Views)&#xD;
                    {&#xD;
                        //Check if we execute only the main view&#xD;
                        if (execAllViews.FirstStringValue == "No" &amp;&amp; view.GUID != report.ViewGUID) continue;                    &#xD;
                    &#xD;
                        ReportExecution reportExecution = new ReportExecution() { Report = report };&#xD;
                        ((List&lt;ReportExecution&gt;) rootReport.Tag).Add(reportExecution);&#xD;
                        reportExecution.Tag = view;&#xD;
                        var errors = "";&#xD;
                        if (rootReport.Cancel) return;&#xD;
                        rootReport.LogMessage("Running report with view '{0}'", view.Name);&#xD;
                        try&#xD;
                        {&#xD;
                            report.CurrentViewGUID = view.GUID;&#xD;
                            reportExecution.Execute();&#xD;
&#xD;
                            var cnt = execTimeout.FirstNumericValue;&#xD;
                            while (--cnt &gt; 0 &amp;&amp; report.IsExecuting &amp;&amp; !rootReport.Cancel)&#xD;
                            {&#xD;
                                Thread.Sleep(1000);&#xD;
                            }&#xD;
&#xD;
                            if (report.IsExecuting)&#xD;
                            {&#xD;
                                if (cnt &lt;= 0) rootReport.LogMessage("Warning: Execution has reached the timeout. Cancelling the execution...");&#xD;
                                report.CancelExecution();&#xD;
                            }&#xD;
                            report.RenderOnly = true;&#xD;
                        }&#xD;
                        catch (Exception ex)&#xD;
                        {&#xD;
                            report.ExecutionErrors = ex.Message;&#xD;
                            rootReport.LogMessage("Unexpected Execution Error:\r\n");&#xD;
                            rootReport.LogMessage(ex.Message);&#xD;
                        }&#xD;
                    }&#xD;
                }&#xD;
                else {&#xD;
                    ((Dictionary&lt;string,string&gt;) rootReport.Tag2).Add("Error loading report " + reportPath, report.LoadErrors);&#xD;
                &#xD;
                    rootReport.LogMessage("Error loading report:");&#xD;
                    rootReport.LogMessage(report.LoadErrors);&#xD;
                }&#xD;
            }&#xD;
            catch (RazorEngine.Templating.TemplateCompilationException ex)&#xD;
            {&#xD;
                var message =  "&lt;b&gt;" + scriptName + "&lt;/b&gt;\r\n" + Helper.GetExceptionMessage(ex);&#xD;
                ((Dictionary&lt;string,string&gt;) rootReport.Tag2).Add(reportPath, message);&#xD;
                rootReport.LogMessage("Error:");&#xD;
                rootReport.LogMessage(message);&#xD;
            }&#xD;
            catch (Exception ex)&#xD;
            {&#xD;
                ((Dictionary&lt;string,string&gt;) rootReport.Tag2).Add(reportPath, ex.Message);&#xD;
                rootReport.LogMessage("Error:");&#xD;
                rootReport.LogMessage(ex.Message);&#xD;
            }&#xD;
        }&#xD;
&#xD;
        var checkSubFolders = rootReport.InputValues.First(i =&gt; i.DisplayNameEl.StartsWith("Check sub-folders"));&#xD;
        if (checkSubFolders.FirstStringValue == "Yes") {&#xD;
            foreach (string subFolder in Directory.GetDirectories(folder))&#xD;
            {&#xD;
                if (rootReport.Cancel) return;&#xD;
                CheckExecutions(rootReport, subFolder);&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
} &#xD;
&#xD;
</Script><SortOrder>1</SortOrder></ReportTask></Tasks><Views><ReportView><GUID>63dc764c-607a-411a-9cf6-f31b692e1b97</GUID><Name>View</Name><Views><ReportView><GUID>669e6d2f-3c64-4454-91d6-f4a846e7c03b</GUID><Name>Tab Control</Name><Views><ReportView><GUID>22732ce5-881b-4dee-b81d-642158e1981e</GUID><Name>Summary</Name><Views><ReportView><GUID>effcf71f-ddc3-43b2-b643-b9d1e4e50572</GUID><Name>Model</Name><Views><ReportView><GUID>9e341dfb-dbd0-4011-ac55-aecb67a6205c</GUID><Name>Model Container</Name><Views><ReportView><GUID>efb04cb8-eb65-4231-b2b0-3a31faf31109</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>9d4fc246-6454-45d4-9223-90245794b25f</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>8523c239-0372-433c-b6b9-7cca02df3567</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>d949fd7a-3fe7-4742-8599-4758355fcb16</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>a0c5e3a1-625f-4120-8e0b-cae6058bee29</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>f31eea7f-e982-44e1-8d12-0d304f372949</ModelGUID><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Tab Page</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>09cf8e92-0ec5-4336-82ab-9755232ef05b</GUID><Name>Messages</Name><Views><ReportView><GUID>1659a005-3a56-435f-8ee0-034926530d1d</GUID><Name>Model</Name><Views><ReportView><GUID>53f1bb9c-ca34-4ef2-b042-472ee14abdab</GUID><Name>Model Container</Name><Views><ReportView><GUID>5fb5a264-4e87-44af-9ea7-bcca2a87023a</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>b83c96a3-0933-4869-babe-489468bad2ed</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>94bfa290-97f9-4c4e-bb33-e0750058c959</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>b4cf8363-0689-42fc-8301-fa60d8cf7f4f</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>dff3b771-3900-4906-abfd-9c637ec050ba</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>ef7b732c-c9d7-4327-8f4c-b5a4ec8bc3de</ModelGUID><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Tab Page</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>e268b0ec-3cb9-4039-823a-ac131bffcc34</GUID><Name>Errors</Name><Views><ReportView><GUID>bd75ce6e-1c55-4309-b5ea-553408dc9be9</GUID><Name>Model</Name><Views><ReportView><GUID>24299850-ba17-4170-9f61-b03931df3eb1</GUID><Name>Model Container</Name><Views><ReportView><GUID>09ff120f-327d-44d5-b000-f255d425f165</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>7f6ce867-39e9-47f4-a7bf-34bfab57cccc</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>9878e9d4-9abe-4ff5-90af-ed12b5adf614</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>b10b25bf-4a10-41da-afc8-f89801aa3ef1</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>940b580b-5dc8-4db4-9ab7-128ea3ca50b4</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>72d5e006-f7f1-4a14-95da-c3cddcdc9ca6</ModelGUID><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Tab Page</TemplateName><SortOrder>2</SortOrder></ReportView></Views><TemplateName>Tab Control</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><Parameters><Parameter><Name>messages_mode</Name><Value>enabledshownexec</Value></Parameter><Parameter><Name>restrictions_per_row</Name><Value>6</Value></Parameter></Parameters><SortOrder>1</SortOrder></ReportView></Views><InitScript>@using System.IO&#xD;
@{&#xD;
    Report report = Model;&#xD;
	ReportExecutionLog log = report;&#xD;
&#xD;
    log.LogMessage("Executing Init Script");&#xD;
&#xD;
    //Fill folders enum&#xD;
    var foldersEnum = report.Sources[0].MetaData.Enums.FirstOrDefault(i =&gt; i.Name == "Folders");&#xD;
    if (foldersEnum.Values.Count == 0) {&#xD;
        //Init the folder enums&#xD;
        List&lt;string&gt; choices = new List&lt;string&gt;();&#xD;
        FileHelper.AddFolderChoices(report.Repository.ReportsFolder, "", choices);&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = Path.DirectorySeparatorChar.ToString() });&#xD;
        foreach (var folder in choices) {&#xD;
            foldersEnum.Values.Add(new MetaEV() { Id = folder });&#xD;
        }&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = "Personal Folders" });&#xD;
     }&#xD;
 }&#xD;
</InitScript></Report>